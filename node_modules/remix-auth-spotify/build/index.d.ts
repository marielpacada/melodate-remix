import type { SessionStorage } from '@remix-run/server-runtime';
import type { AuthenticateOptions, StrategyVerifyCallback } from 'remix-auth';
import type { OAuth2Profile, OAuth2StrategyVerifyParams } from 'remix-auth-oauth2';
import { OAuth2Strategy } from 'remix-auth-oauth2';
export interface SpotifyStrategyOptions {
    clientID: string;
    clientSecret: string;
    callbackURL: string;
    scope?: string;
    sessionStorage: SessionStorage;
    sessionKey?: string;
    sessionStrategyKey?: string;
    sessionErrorKey?: string;
}
export interface SpotifyImage {
    url: string;
    height: number | null;
    width: number | null;
}
export interface SpotifyProfile extends OAuth2Profile {
    id: string;
    displayName: string;
    emails: [{
        value: string;
    }];
    photos?: [{
        value: string;
    }];
    __json: {
        id: string;
        display_name: string;
        email: string;
        country: string;
        explicit_content: {
            filter_enabled: boolean;
            filter_locked: boolean;
        };
        external_urls: {
            spotify: string;
        };
        followers: {
            href: string | null;
            total: number;
        };
        href: string;
        images: Array<SpotifyImage>;
        product: string;
        type: string;
        uri: string;
    };
}
export interface SpotifyExtraParams extends Record<string, string | number> {
    expiresIn: number;
    tokenType: string;
}
export interface User {
    id: string;
    email: string;
    name?: string;
    image?: string;
}
export interface Session {
    accessToken: string;
    expiresAt: number;
    refreshToken?: string;
    tokenType?: string;
    user: User | null;
}
export interface RefreshTokenResponse {
    access_token: string;
    token_type: string;
    expires_in: number;
    scope: string;
}
export type CheckOptions = {
    successRedirect?: never;
    failureRedirect?: never;
} | {
    successRedirect: string;
    failureRedirect?: never;
} | {
    successRedirect?: never;
    failureRedirect: string;
};
export declare class SpotifyStrategy extends OAuth2Strategy<Session, SpotifyProfile, SpotifyExtraParams> {
    name: string;
    private scope;
    private readonly userInfoURL;
    private readonly sessionStorage;
    readonly sessionKey: string;
    readonly sessionStrategyKey: string;
    readonly sessionErrorKey: string;
    constructor({ clientID, clientSecret, callbackURL, scope, sessionStorage, sessionKey, sessionStrategyKey, sessionErrorKey, }: SpotifyStrategyOptions, verify: StrategyVerifyCallback<Session, OAuth2StrategyVerifyParams<SpotifyProfile, SpotifyExtraParams>>);
    protected authorizationParams(): URLSearchParams;
    protected userProfile(accessToken: string): Promise<SpotifyProfile>;
    protected getAccessToken(response: Response): Promise<{
        accessToken: string;
        refreshToken: string;
        extraParams: SpotifyExtraParams;
    }>;
    private refreshAccessToken;
    protected handleResult(req: Request, options: AuthenticateOptions, result: string | Session | null, hasErrored?: boolean): Promise<Session | null>;
    getSession(req: Request, checkOptions: {
        successRedirect: string;
        failureRedirect?: never;
    }): Promise<null>;
    getSession(req: Request, checkOptions: {
        successRedirect?: never;
        failureRedirect: string;
    }): Promise<Session>;
    getSession(req: Request, checkOptions?: {
        successRedirect?: never;
        failureRedirect?: never;
    }): Promise<Session | null>;
}
