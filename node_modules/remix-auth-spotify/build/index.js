"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpotifyStrategy = void 0;
const remix_auth_oauth2_1 = require("remix-auth-oauth2");
class SpotifyStrategy extends remix_auth_oauth2_1.OAuth2Strategy {
    constructor({ clientID, clientSecret, callbackURL, scope, sessionStorage, sessionKey, sessionStrategyKey, sessionErrorKey, }, verify) {
        super({
            clientID,
            clientSecret,
            callbackURL,
            authorizationURL: 'https://accounts.spotify.com/authorize',
            tokenURL: 'https://accounts.spotify.com/api/token',
        }, verify);
        this.name = 'spotify';
        this.userInfoURL = 'https://api.spotify.com/v1/me';
        this.scope = scope !== null && scope !== void 0 ? scope : 'user-read-email';
        this.sessionStorage = sessionStorage;
        this.sessionKey = sessionKey !== null && sessionKey !== void 0 ? sessionKey : 'spotify:session';
        this.sessionStrategyKey = sessionStrategyKey !== null && sessionStrategyKey !== void 0 ? sessionStrategyKey : 'spotify';
        this.sessionErrorKey = sessionErrorKey !== null && sessionErrorKey !== void 0 ? sessionErrorKey : 'spotify:error';
    }
    authorizationParams() {
        return new URLSearchParams({
            scope: this.scope,
        });
    }
    async userProfile(accessToken) {
        const response = await fetch(this.userInfoURL, {
            headers: {
                Accept: 'application/json',
                Authorization: `Bearer ${accessToken}`,
            },
        });
        const data = await response.json();
        const profile = {
            provider: 'spotify',
            displayName: data.display_name,
            id: data.id,
            emails: [{ value: data.email }],
            photos: data.images.length > 0
                ? [{ value: data.images[0].url }]
                : undefined,
            __json: data,
        };
        return profile;
    }
    async getAccessToken(response) {
        const { access_token: accessToken, token_type: tokenType, expires_in: expiresIn, refresh_token: refreshToken, } = await response.json();
        return {
            accessToken,
            refreshToken,
            extraParams: { tokenType, expiresIn },
        };
    }
    async refreshAccessToken(refreshToken) {
        const url = `https://accounts.spotify.com/api/token?${new URLSearchParams({
            grant_type: 'refresh_token',
            refresh_token: refreshToken,
        })}`;
        const base64Token = Buffer.from(`${this.clientID}:${this.clientSecret}`).toString('base64');
        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                Authorization: `Basic ${base64Token}`,
            },
            method: 'POST',
        });
        if (!response.ok) {
            throw new Error(response.statusText);
        }
        return response.json();
    }
    async handleResult(req, options, result, hasErrored = false) {
        if (options.failureRedirect && hasErrored)
            return this.failure(result, req, this.sessionStorage, options);
        if (hasErrored)
            return null;
        if (options.successRedirect && !hasErrored)
            return this.success(result, req, this.sessionStorage, options);
        return result;
    }
    async getSession(req, checkOptions = {}) {
        var _a;
        const sessionCookie = await this.sessionStorage.getSession(req.headers.get('Cookie'));
        const session = sessionCookie.get(this.sessionKey);
        const options = {
            name: this.name,
            sessionKey: this.sessionKey,
            sessionStrategyKey: this.sessionStrategyKey,
            sessionErrorKey: this.sessionErrorKey,
            ...checkOptions,
        };
        if (!session || !session.refreshToken || !session.accessToken) {
            return this.handleResult(req, options, 'No session data found', true);
        }
        if (Date.now() < session.expiresAt) {
            return this.handleResult(req, options, session);
        }
        try {
            const refreshedToken = await this.refreshAccessToken(session.refreshToken);
            const currentPath = new URL(req.url).pathname;
            return this.success({
                ...session,
                accessToken: refreshedToken.access_token,
                expiresAt: Date.now() + refreshedToken.expires_in * 1000,
            }, req, this.sessionStorage, {
                ...options,
                successRedirect: (_a = options === null || options === void 0 ? void 0 : options.successRedirect) !== null && _a !== void 0 ? _a : currentPath,
            });
        }
        catch (error) {
            console.log(error);
            return this.handleResult(req, options, 'Could not refresh session', true);
        }
    }
}
exports.SpotifyStrategy = SpotifyStrategy;
